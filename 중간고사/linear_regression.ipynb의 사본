{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"linear_regression.ipynb의 사본","provenance":[{"file_id":"https://github.com/callee2006/MachineLearning/blob/master/linear_regression.ipynb","timestamp":1601884897570}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"fzHEwOGyzQQb"},"source":["This file contains practice examples of the following topics:\n","\n","* Linear Regression\t\n","  - Linear regression\n","  - Ridge ($L_2$ regularization)\n","  - Lasso ($L_1$ regularization)\n","  - ElasticNet ($L_1$ + $L_2$ regularization)\n","\t\n","* Linear Classification\t\n","  -\tLogistic regression\n","\n","(Most of the contents and code are from \"Introduction to Machine Learning with Python\" by Andreas C. Müller & Sarah Guido)"]},{"cell_type":"code","metadata":{"id":"nIn3aQngJ7q8","executionInfo":{"status":"ok","timestamp":1601884806224,"user_tz":-540,"elapsed":7787,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"094ce275-d2b0-4b92-fd87-6e487a48bd31","colab":{"base_uri":"https://localhost:8080/","height":451}},"source":["! pip install mglearn\n","\n","import numpy as np\n","import sklearn as sk\n","from sklearn.model_selection import train_test_split\n","\n","import matplotlib.pyplot as plt\n","import mglearn"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting mglearn\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/65/38/8aced26fce0b2ae82c3c87cd3b6105f38ca6d9d51704ecc44aa54473e6b9/mglearn-0.1.9.tar.gz (540kB)\n","\u001b[K     |████████████████████████████████| 542kB 2.8MB/s \n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.6/dist-packages (from mglearn) (1.18.5)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.6/dist-packages (from mglearn) (3.2.2)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.6/dist-packages (from mglearn) (0.22.2.post1)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.6/dist-packages (from mglearn) (1.1.2)\n","Requirement already satisfied: pillow in /usr/local/lib/python3.6/dist-packages (from mglearn) (7.0.0)\n","Requirement already satisfied: cycler in /usr/local/lib/python3.6/dist-packages (from mglearn) (0.10.0)\n","Requirement already satisfied: imageio in /usr/local/lib/python3.6/dist-packages (from mglearn) (2.4.1)\n","Requirement already satisfied: joblib in /usr/local/lib/python3.6/dist-packages (from mglearn) (0.16.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib->mglearn) (1.2.0)\n","Requirement already satisfied: python-dateutil>=2.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib->mglearn) (2.8.1)\n","Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /usr/local/lib/python3.6/dist-packages (from matplotlib->mglearn) (2.4.7)\n","Requirement already satisfied: scipy>=0.17.0 in /usr/local/lib/python3.6/dist-packages (from scikit-learn->mglearn) (1.4.1)\n","Requirement already satisfied: pytz>=2017.2 in /usr/local/lib/python3.6/dist-packages (from pandas->mglearn) (2018.9)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from cycler->mglearn) (1.15.0)\n","Building wheels for collected packages: mglearn\n","  Building wheel for mglearn (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for mglearn: filename=mglearn-0.1.9-py2.py3-none-any.whl size=582639 sha256=1794a9709bd3ae738fd2580908829a982378544d60399ede08ecbf3598f4ed8a\n","  Stored in directory: /root/.cache/pip/wheels/eb/a6/ea/a6a3716233fa62fc561259b5cb1e28f79e9ff3592c0adac5f0\n","Successfully built mglearn\n","Installing collected packages: mglearn\n","Successfully installed mglearn-0.1.9\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"b8Tof_xy9ryB"},"source":["# Linear regression\n","\n",">$\\hat{y}=wx + b$\n","\n",">$\\hat{y}=w_1x_1+ w_2x_2+ ...+ b$\n","\n",">$Loss_{linear} = \\frac{1}{2N} \\sum_i{(\\hat{y}-y)^2}$\n","(least square)\n","\n","See https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html"]},{"cell_type":"markdown","metadata":{"id":"va04ZHqD-yDw"},"source":["## Linear regression on wave dataset"]},{"cell_type":"code","metadata":{"id":"gLGEpG85mRmv"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"L-PFWfbD9u2p","executionInfo":{"status":"ok","timestamp":1601884806225,"user_tz":-540,"elapsed":7777,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"07e95f41-ecc7-4e41-d567-8cd62d4cc0a2","colab":{"base_uri":"https://localhost:8080/","height":465}},"source":["mglearn.plots.plot_linear_regression_wave()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["w[0]: 0.393906  b: -0.031804\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x576 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"65N_tdUc92Q2"},"source":["from sklearn.linear_model import LinearRegression\n","\n","# creates wave data\n","X, y = mglearn.datasets.make_wave(n_samples=60)\n","\n","# split into training set and test set\n","X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wumW0e_4-BVS","executionInfo":{"status":"ok","timestamp":1601884806226,"user_tz":-540,"elapsed":7763,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"293121bb-b19b-44c4-b908-b6cdc7eec511","colab":{"base_uri":"https://localhost:8080/","height":53}},"source":["# regression (parameter estimation)\n","lr = LinearRegression().fit(X_train, y_train)\n","\n","# check coefficients and intercept\n","print(\"lr.coef_: \", lr.coef_)               # W\n","print(\"lr.intercept_:\", lr.intercept_)      # b"],"execution_count":null,"outputs":[{"output_type":"stream","text":["lr.coef_:  [0.39390555]\n","lr.intercept_: -0.031804343026759746\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"KuMJWnPt4Kqd"},"source":["score() Returns the coefficient of determination $R^2$ of the prediction $(1-u/v)$\n"," \n"," $u=\\sum(\\hat{y}-y)^2$ and $v=\\sum(y-\\bar{y})$, where $\\bar{y}$ is the mean of $y$ "]},{"cell_type":"code","metadata":{"id":"Z_iqvTiT-DHM","executionInfo":{"status":"ok","timestamp":1601884806226,"user_tz":-540,"elapsed":7750,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"b6c8da2c-89f6-4cb4-a1fd-6d4c07be8912","colab":{"base_uri":"https://localhost:8080/","height":53}},"source":["# evaluation\n","print(\"Training set score: {:.2f}\".format(lr.score(X_train, y_train)))\n","print(\"Test set score: {:.2f}\".format(lr.score(X_test, y_test)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Training set score: 0.67\n","Test set score: 0.66\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Y4AVYd7pIgKF"},"source":["# Exercises\n","\n","Apply linear regression to sigmoid function\n","\n",">$sigmoid(x) = \\frac{1}{1+exp(-x)}$\n","\n","\n","## Data generation\n","\n","1. generate X as an array\n","```\n","    X = np.arange(-10., 10., 0.2)\n","    X = np.expand_dims(X, axis = 1)\n","    \n","```\n","\n","2. generate y as using sigmoid() and np.random.normal() functions\n","\n","```   \n",">>  y = sigmoid(X[:, 0]) + np.random.normal(0, 0.1, size = [len(X)])\n","```\n","\n","\n","* Check shape of X and y\n","\n","\n","\n","## Linear regression\n","\n","1. Split data into training set and test set\n","\n","2. import LinearRegression\n","\n","3. Create a LinearRegression object\n","\n","4. Train  (call fit() function )\n","\n","5. Apply linear regression (call predict() function)"]},{"cell_type":"code","metadata":{"id":"Z66yYaMsIixi"},"source":["# sigmoid(x) function\n","def sigmoid(x):\n","  return 1. / (1. + np.exp(-x))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qkYnSle8IjfM","executionInfo":{"status":"ok","timestamp":1601884806708,"user_tz":-540,"elapsed":8219,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"32888c56-8194-4dc5-a878-dd23ae480080","colab":{"base_uri":"https://localhost:8080/","height":337}},"source":["# generate random data using sigmoid and Gaussian random numbers\n","\n","X = np.arange(-10., 10., 0.2)\n","print(\"X.shape = \", X.shape)\n","X = np.expand_dims(X, axis = 1)\n","print(\"X.shape = \", X.shape)\n","\n","y = sigmoid(X[:, 0]) + np.random.normal(0, 0.1, size = [len(X)])\n","print(\"y.shape = \", y.shape)\n","\n","mglearn.discrete_scatter(X[:, 0], y)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["X.shape =  (100,)\n","X.shape =  (100, 1)\n","y.shape =  (100,)\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7ff441427860>]"]},"metadata":{"tags":[]},"execution_count":7},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"ySKa9wd5Il1w"},"source":["# TO DO: split into training set and test set\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zOkR_WiGIpWx"},"source":["# TO DO: import LinearRegression\n","\n","\n","# TO DO: regression (parameter estimation)\n","\n","\n","# TO DO: check coeeficients and intercept\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"BwocVl1RIsj3"},"source":["# TO DO: get preduction result (y_hat) using X_test\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"H_kicYwNIrD3","executionInfo":{"status":"error","timestamp":1601884807222,"user_tz":-540,"elapsed":8716,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"c1fbda88-45ee-46ee-e43a-f1616221580d","colab":{"base_uri":"https://localhost:8080/","height":457}},"source":["# Display predictino result\n","mglearn.discrete_scatter(X_test[:, 0], y_test, markers ='o')\n","mglearn.discrete_scatter(X_test[:, 0], y_hat, s = 10, markers ='+')"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-11-b85482df9752>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Display predictino result\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mmglearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdiscrete_scatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmarkers\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0;34m'o'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mmglearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdiscrete_scatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_hat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmarkers\u001b[0m \u001b[0;34m=\u001b[0m\u001b[0;34m'+'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'y_hat' is not defined"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"IUhEYkTxAZ2P"},"source":["## Linear regression on Boston house price data"]},{"cell_type":"code","metadata":{"id":"9TPeDRtZ-phA","executionInfo":{"status":"ok","timestamp":1601884859007,"user_tz":-540,"elapsed":547,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"04ff83e9-6083-43ed-ad10-b3f73cad7902","colab":{"base_uri":"https://localhost:8080/","height":90}},"source":["# load boston data\n","X, y = mglearn.datasets.load_extended_boston()\n","\n","# split into training set and test set\n","X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)\n","print(\"X_train.shape =\", X_train.shape)\n","print(\"y_train.shape =\", y_train.shape)\n","print(\"X_test.shape =\", X_test.shape)\n","print(\"y_test.shape =\", y_test.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["X_train.shape = (379, 104)\n","y_train.shape = (379,)\n","X_test.shape = (127, 104)\n","y_test.shape = (127,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"b-AAALUUA1mX","executionInfo":{"status":"ok","timestamp":1601884861456,"user_tz":-540,"elapsed":1136,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"5ae5ea3d-8880-49eb-e636-828f7a846ebf","colab":{"base_uri":"https://localhost:8080/","height":506}},"source":["# create object \n","lr = LinearRegression()\n","\n","# train\n","lr.fit(X_train, y_train)\n","\n","# the above two statements can be combined as the next line\n","# lr = LinearRegression().fit(X_train, y_train)\n","\n","# check coefficients and intercept\n","print(\"lr.coef_:\", lr.coef_)             # w\n","print(\"lr.intercept_:\", lr.intercept_)   # b"],"execution_count":null,"outputs":[{"output_type":"stream","text":["lr.coef_: [-4.12710947e+02 -5.22432068e+01 -1.31898815e+02 -1.20041365e+01\n"," -1.55107129e+01  2.87163342e+01  5.47040992e+01 -4.95346659e+01\n","  2.65823927e+01  3.70620316e+01 -1.18281674e+01 -1.80581965e+01\n"," -1.95246830e+01  1.22025403e+01  2.98078144e+03  1.50084257e+03\n","  1.14187325e+02 -1.69700520e+01  4.09613691e+01 -2.42636646e+01\n","  5.76157466e+01  1.27812142e+03 -2.23986944e+03  2.22825472e+02\n"," -2.18201083e+00  4.29960320e+01 -1.33981515e+01 -1.93893485e+01\n"," -2.57541277e+00 -8.10130128e+01  9.66019367e+00  4.91423718e+00\n"," -8.12114800e-01 -7.64694179e+00  3.37837099e+01 -1.14464390e+01\n","  6.85083979e+01 -1.73753604e+01  4.28128204e+01  1.13988209e+00\n"," -7.72696840e-01  5.68255921e+01  1.42875996e+01  5.39551110e+01\n"," -3.21709644e+01  1.92709675e+01 -1.38852338e+01  6.06343266e+01\n"," -1.23153942e+01 -1.20041365e+01 -1.77243899e+01 -3.39868183e+01\n","  7.08999816e+00 -9.22538241e+00  1.71980268e+01 -1.27718431e+01\n"," -1.19727581e+01  5.73871915e+01 -1.75331865e+01  4.10103194e+00\n","  2.93666477e+01 -1.76611772e+01  7.84049424e+01 -3.19098015e+01\n","  4.81752461e+01 -3.95344813e+01  5.22959055e+00  2.19982410e+01\n","  2.56483934e+01 -4.99982035e+01  2.91457545e+01  8.94267456e+00\n"," -7.16599297e+01 -2.28147862e+01  8.40660981e+00 -5.37905422e+00\n","  1.20137322e+00 -5.20877186e+00  4.11452351e+01 -3.78250760e+01\n"," -2.67163851e+00 -2.55217108e+01 -3.33982030e+01  4.62272693e+01\n"," -2.41509169e+01 -1.77532970e+01 -1.39723701e+01 -2.35522208e+01\n","  3.68353800e+01 -9.46890859e+01  1.44302810e+02 -1.51158659e+01\n"," -1.49513436e+01 -2.87729579e+01 -3.17673192e+01  2.49551594e+01\n"," -1.84384534e+01  3.65073948e+00  1.73101122e+00  3.53617137e+01\n","  1.19553429e+01  6.77025947e-01  2.73452009e+00  3.03720012e+01]\n","lr.intercept_: 30.93456367364464\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"KWUp8R6EA5mV","executionInfo":{"status":"ok","timestamp":1601884861980,"user_tz":-540,"elapsed":732,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"1a97ba9e-c9e5-48eb-a1a8-d1c0531d3f08","colab":{"base_uri":"https://localhost:8080/","height":53}},"source":["# Performance evaluation\n","print(\"Training score: {:.2f}\".format(lr.score(X_train, y_train)))\n","print(\"Test score: {:.2f}\".format(lr.score(X_test, y_test)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Training score: 0.95\n","Test score: 0.61\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ku3oWdAPPKpA","executionInfo":{"status":"ok","timestamp":1601884864398,"user_tz":-540,"elapsed":1141,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"ff833557-0da4-487d-eccb-6afa1c16cbb6","colab":{"base_uri":"https://localhost:8080/","height":53}},"source":["# save and load model\n","\n","import pickle\n","\n","filename = 'linear'\n","\n","pickle.dump(lr, open(filename, 'wb'))\n","lr2 = pickle.load(open(filename, 'rb'))\n","\n","print(\"Training score: {:.2f}\".format(lr2.score(X_train, y_train)))\n","print(\"Test score: {:.2f}\".format(lr2.score(X_test, y_test)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Training score: 0.95\n","Test score: 0.61\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Z6incDSiEOCG"},"source":["==> Big difference between training accuracy and test accuracy: overfitting"]},{"cell_type":"markdown","metadata":{"id":"D3g4o-q8CTQ6"},"source":["## Ridge regression\n","\n","> linear regression + L2 regularization\n","\n","> $Loss_{ridge} = \\frac{1}{2N} \\sum_i{(\\hat{y}-y)^2}+\\alpha |W|^2$\n","\n","\n","See https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Ridge.html"]},{"cell_type":"code","metadata":{"id":"z2dbfVjeBF0j"},"source":["from sklearn.linear_model import Ridge"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"T5bqcf-pD6_b"},"source":["ridge = Ridge().fit(X_train, y_train)           # by default, alpha = 1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5XF6Eo_8D_CL"},"source":["#print(\"ridge.coef_: {}\".format(ridge.coef_))             # w\n","#print(\"ridge.intercept_: {}\".format(ridge.intercept_))   # b"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"seWbwxq2D8M9"},"source":["print(\"Training score: {:.2f}\".format(ridge.score(X_train, y_train)))\n","print(\"Test score: {:.2f}\".format(ridge.score(X_test, y_test)))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"koGC9RCVEYn2"},"source":["Lower training accuracy, but higher test accuracy"]},{"cell_type":"code","metadata":{"id":"I5w4Bo1rEYKz","executionInfo":{"status":"error","timestamp":1603534646906,"user_tz":-540,"elapsed":692,"user":{"displayName":"안수현학부생","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GiflJXlQYn878OGBH0D279WP8bga5RYOxISvAom0g=s64","userId":"09538039103302826305"}},"outputId":"0ff9282c-b743-4ccc-9b71-da665943ab32","colab":{"base_uri":"https://localhost:8080/","height":237}},"source":["# applying higher alpha  --> too strong constraint\n","ridge10 = Ridge(alpha=10).fit(X_train, y_train)\n","\n","print(\"Training score: {:.2f}\".format(ridge10.score(X_train, y_train)))\n","print(\"Test score: {:.2f}\".format(ridge10.score(X_test, y_test)))"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-3ee8b316e30c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# applying higher alpha  --> too strong constraint\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mridge10\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mRidge\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0malpha\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Training score: {:.2f}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mridge10\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscore\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Test score: {:.2f}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mridge10\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscore\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'Ridge' is not defined"]}]},{"cell_type":"code","metadata":{"id":"0f7d0UwQFDHv"},"source":["# applying low alpha    --> appropriate constraint\n","ridge01 = Ridge(alpha=0.1).fit(X_train, y_train)\n","\n","print(\"Training score: {:.2f}\".format(ridge01.score(X_train, y_train)))\n","print(\"Test score: {:.2f}\".format(ridge01.score(X_test, y_test)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"W_D4vLvUFMAt"},"source":["# coefficient magnitude\n","plt.plot(ridge01.coef_, 'v', label=\"Ridge alpha=0.1\")\n","plt.plot(ridge.coef_, 's', label=\"Ridge alpha=1\")\n","plt.plot(ridge10.coef_, '^', label=\"Ridge alpha=10\")\n","plt.plot(lr.coef_, 'o', label=\"LinearRegression\")\n","plt.xlabel(\"Coefficient index\")\n","plt.ylabel(\"Coefficient magnitude\")\n","plt.hlines(0, 0, len(lr.coef_))\n","plt.ylim(-25, 25)\n","plt.legend()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"377I-CihF3iS"},"source":["## Lasso regression\n","\n","> linear regression + L1 regularization\n","\n","> $Loss_{lasso}=\\frac{1}{2N} \\sum_i{(\\hat{y}-y)^2} +\\alpha |W|$\n","\n","\n","See https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Ridge.html"]},{"cell_type":"code","metadata":{"id":"e3BsBAe8SJHV"},"source":["from sklearn.linear_model import Lasso"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"D87pcTGxFiKo","executionInfo":{"status":"ok","timestamp":1601884876376,"user_tz":-540,"elapsed":1006,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"34715890-4706-46e3-a452-6e02a55eb30f","colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["# by default, alpha = 1\n","lasso = Lasso().fit(X_train, y_train)         # default alpha = 1, severe underfitting\n","print(\"Training score: {:.2f}\".format(lasso.score(X_train, y_train)))\n","print(\"Test score: {:.2f}\".format(lasso.score(X_test, y_test)))\n","print(\"Number of features used:\", np.sum(lasso.coef_ != 0))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Training score: 0.29\n","Test score: 0.21\n","Number of features used: 4\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"zWSRtuO1GHP-"},"source":["# Lasso with alpha = 0.01\n","lasso001 = Lasso(0.01, max_iter=100000).fit(X_train, y_train)\n","print(\"Training score: {:.2f}\".format(lasso001.score(X_train, y_train)))\n","print(\"Test score: {:.2f}\".format(lasso001.score(X_test, y_test)))\n","print(\"Number of features used:\", np.sum(lasso001.coef_ != 0))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QUi3xMVgGVUj"},"source":["# Lasso with alpha = 0.0001\n","lasso0001 = Lasso(0.0001, max_iter=100000).fit(X_train, y_train)\n","print(\"Training score: {:.2f}\".format(lasso0001.score(X_train, y_train)))\n","print(\"Test score: {:.2f}\".format(lasso0001.score(X_test, y_test)))\n","print(\"Number of features used:\", np.sum(lasso0001.coef_ != 0))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iSL1a8aDGqg9"},"source":["plt.plot(lasso0001.coef_, 'v', label=\"Lasso alpha=0.0001\")\n","plt.plot(lasso001.coef_, '^', label=\"Lasso alpha=0.01\")\n","plt.plot(lasso.coef_, 's', label=\"Lasso alpha=1\")\n","\n","#plt.plot(ridge01.coef_, 'o', label=\"Ridge alpha=0.1\")\n","plt.legend(ncol=2, loc=(0, 1.05))\n","plt.ylim(-25, 25)\n","plt.xlabel(\"Coefficient index\")\n","plt.ylabel(\"Coefficient magnitude\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"iVAiTvloIGI6"},"source":["## ElasticNet regression\n","\n","> linear regression + L1 regularization + L2 regularization\n","\n","\n","> $Loss_{elastic\\_net}=\\frac{1}{2N} \\sum_i{(\\hat{y}-y)^2} +a |W| +\\frac{1}{2}b|W|^2$\n","\n","> $Loss_{elastic\\_net}=\\frac{1}{2N} \\sum_i{(\\hat{y}-y)^2} +\\alpha\\cdot \\lambda |W| +\\frac{1}{2} \\alpha\\cdot(1-\\lambda)|W|^2$\n","\n"," - $\\alpha$: weight of regularization (L1 + L2)\n"," - $\\lambda$: ratio of L1 regularization ($0 \\leq\\lambda\\leq 1$)\n","\n"," - $\\alpha = a + b$, $\\lambda = \\frac{a}{a+b}$\n","\n","\n","See https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.ElasticNet.html"]},{"cell_type":"code","metadata":{"id":"X7LJsZi3iLE7"},"source":["from sklearn.linear_model import ElasticNet"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WE0dNRNpiiFX"},"source":["# by default, alpha = 1, l1_ratio = 0.5\n","elastic_net = ElasticNet().fit(X_train, y_train)\n","print(\"Training score: {:.2f}\".format(elastic_net.score(X_train, y_train)))\n","print(\"Test score: {:.2f}\".format(elastic_net.score(X_test, y_test)))\n","print(\"Number of features used:\", np.sum(elastic_net.coef_ != 0))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"__lLPqsxjtfK"},"source":["# alpha = 0.01\n","elastic_net001 = ElasticNet(alpha=0.01, l1_ratio = 0.5).fit(X_train, y_train)\n","print(\"Training set score: {:.2f}\".format(elastic_net001.score(X_train, y_train)))\n","print(\"Test set score: {:.2f}\".format(elastic_net001.score(X_test, y_test)))\n","print(\"Number of features used:\", np.sum(elastic_net001.coef_ != 0))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0L62piK-kVDE"},"source":["# alpha = 0.001\n","elastic_net0001 = ElasticNet(alpha=0.001, l1_ratio = 0.5).fit(X_train, y_train)\n","print(\"Training score: {:.2f}\".format(elastic_net0001.score(X_train, y_train)))\n","print(\"Test score: {:.2f}\".format(elastic_net0001.score(X_test, y_test)))\n","print(\"Number of features used:\", np.sum(elastic_net0001.coef_ != 0))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mHZzoLTTkNNi"},"source":["# alpha = 0.0001\n","elastic_net00001 = ElasticNet(alpha=0.0001, l1_ratio = 0.5).fit(X_train, y_train)\n","print(\"Training score: {:.2f}\".format(elastic_net00001.score(X_train, y_train)))\n","print(\"Test score: {:.2f}\".format(elastic_net00001.score(X_test, y_test)))\n","print(\"Number of features used:\", np.sum(elastic_net00001.coef_ != 0))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5qhfeqH1ko99"},"source":["plt.plot(elastic_net.coef_, 'v', label=\"Lasso alpha=1\")\n","plt.plot(elastic_net001.coef_, '^', label=\"ElasticNet alpha=0.01\")\n","plt.plot(elastic_net0001.coef_, '^', label=\"ElasticNet alpha=0.001\")\n","plt.plot(elastic_net00001.coef_, 's', label=\"Lasso alpha=0.0001\")\n","\n","#plt.plot(ridge01.coef_, 'o', label=\"Ridge alpha=0.1\")\n","plt.legend(ncol=2, loc=(0, 1.05))\n","plt.ylim(-25, 25)\n","plt.xlabel(\"Coefficient index\")\n","plt.ylabel(\"Coefficient magnitude\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"FKf1W0pMIHB4"},"source":["# Linear classification\n","\n","* Binary classification\n","\n","  - class +1 if $f(x) = \\sum_i{w_ix_i}+b = w_1 x_1 + w_2 x_2+...+b > 0$\n","  - class -1 if $f(x) = \\sum_i{w_ix_i}+b = w_1 x_1 + w_2 x_2+...+b < 0$\n","\n","> Class boundary is hyperplane\n","\n","* Multi-class classification: \n","\n","    $ŷ = argmax_j {f_j(x)}= argmax_j {(\\sum_i{w_{ji} x_i} + b_j)} = argmax_j {([)w_{j1} x_1 + w_{j2} x_2+...+b_j)}$\n","    \n","\n","* Popular fitting algorithms\n","  - Logistic regression (linear_model.LogisticRegression)\n","  - Linear SVM\n","\n"]},{"cell_type":"code","metadata":{"id":"-g6tlW2hrEKE","executionInfo":{"status":"ok","timestamp":1601884882673,"user_tz":-540,"elapsed":1180,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"44da362c-901a-43d8-fc78-9932bcf88c2c","colab":{"base_uri":"https://localhost:8080/","height":71}},"source":["# prepare forge dataset\n","X, y = mglearn.datasets.make_forge()\n","\n","# split into training set and test set\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)\n","print(\"X_train contains {} samples, X_test contains {} samples\".format(len(X_train), len(X_test)))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["X_train contains 19 samples, X_test contains 7 samples\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function make_blobs is deprecated; Please import make_blobs directly from scikit-learn\n","  warnings.warn(msg, category=FutureWarning)\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"d69750jZQJvZ"},"source":["## Logistic regression\n","* binary classification ($y$ = 0 or 1)\n","* $\\hat{y} = sigmoid(\\sum_i{w_ix_i+b})$\n","* $ Loss_{logistic} = \\frac{1}{2N}(y - \\hat{y})^2 + \\alpha |W|_L$\n","\n","\n","See https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html\n"]},{"cell_type":"code","metadata":{"id":"_Q8N1mzsrj7D"},"source":["from sklearn.linear_model import LogisticRegression\n","logi_reg = LogisticRegression().fit(X_train,y_train)\n","\n","# check coefficients and intercept\n","print(\"logi_reg.coef_: \", logi_reg.coef_)               # W\n","print(\"logi_reg.intercept_:\", logi_reg.intercept_)      # b"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"k44esl8bvZ1U"},"source":["y_pred = logi_reg.predict(X_test)\n","print(\"y_pred =\", y_pred)\n","print(\"y_test =\", y_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zfv5S9ICsCfe"},"source":["print(\"Training accuracy = \", logi_reg.score(X_train, y_train))\n","print(\"Test Accuracy = \", logi_reg.score(X_test, y_test))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0JWbGNiDs_eY"},"source":["## linear SVM classifier (LinearSVC)"]},{"cell_type":"code","metadata":{"id":"ApwF2wPssNtW","executionInfo":{"status":"ok","timestamp":1601884894030,"user_tz":-540,"elapsed":1044,"user":{"displayName":"","photoUrl":"","userId":""}},"outputId":"18292ac8-546e-4887-d6e5-1cf164705887","colab":{"base_uri":"https://localhost:8080/","height":162}},"source":["# linear SVM classifier\n","\n","from sklearn.svm import LinearSVC\n","\n","linearSVC = LinearSVC().fit(X_train,y_train)\n","# check coefficients and intercept\n","print(\"logi_reg.coef_: \", linearSVC.coef_)               # W\n","print(\"logi_reg.intercept_:\", linearSVC.intercept_)      # b\n","\n","y_pred = linearSVC.predict(X_test)\n","print(\"y_pred =\", y_pred)\n","print(\"y_test =\", y_test)\n","\n","print(\"Training accuracy = \", linearSVC.score(X_train, y_train))\n","print(\"Test Accuracy = \", linearSVC.score(X_test, y_test))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["logi_reg.coef_:  [[-0.11412845  0.54810527]]\n","logi_reg.intercept_: [-0.83080728]\n","y_pred = [1 0 1 0 1 0 0]\n","y_test = [1 0 1 0 1 1 0]\n","Training accuracy =  0.9473684210526315\n","Test Accuracy =  0.8571428571428571\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/svm/_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  \"the number of iterations.\", ConvergenceWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"lf1RXLuRHp_y"},"source":["# Visualization (LogisticRegression vs. LinearSVC)\n","X, y = mglearn.datasets.make_forge()\n","fig, axes = plt.subplots(1, 2, figsize=(10, 3))\n","for model, ax in zip([LogisticRegression(),LinearSVC()], axes):\n","  clf = model.fit(X, y)\n","  mglearn.plots.plot_2d_separator(clf, X, fill=False, eps=0.5, ax=ax, alpha=.7)\n","  mglearn.discrete_scatter(X[:, 0], X[:, 1], y, ax=ax)\n","  ax.set_title(\"{}\".format(clf.__class__.__name__))\n","  ax.set_xlabel(\"Feature 0\")\n","  ax.set_ylabel(\"Feature 1\")\n","axes[0].legend()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Vm42jQgXNrzu"},"source":["## hyper parameter C to control regularization \n","\n","**small C** means **stronger regularization**"]},{"cell_type":"code","metadata":{"id":"nGWcMZCTNeis"},"source":["# prepare breast cancer dataset\n","\n","from sklearn.datasets import load_breast_cancer\n","cancer = load_breast_cancer()\n","X_train, X_test, y_train, y_test = train_test_split(cancer.data, cancer.target, stratify=cancer.target, random_state=42)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RaFKGNOUt9k3"},"source":["# C = 1 (default)\n","logreg = LogisticRegression().fit(X_train, y_train)\n","print(\"Training score: {:.3f}\".format(logreg.score(X_train, y_train)))\n","print(\"Test score: {:.3f}\".format(logreg.score(X_test, y_test))) "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-ZJ0DUbfN246"},"source":["# C = 100\n","logreg100 = LogisticRegression(C=100).fit(X_train, y_train)\n","print(\"Training score: {:.3f}\".format(logreg100.score(X_train, y_train)))\n","print(\"Test score: {:.3f}\".format(logreg100.score(X_test, y_test)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"GdFGK--qN516"},"source":["# C = 0.01\n","logreg001 = LogisticRegression(C=0.01).fit(X_train, y_train)\n","print(\"Training score: {:.3f}\".format(logreg001.score(X_train, y_train)))\n","print(\"Test score: {:.3f}\".format(logreg001.score(X_test, y_test)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LWX7yFmVN8tU"},"source":["# logistic regressing using L2-regularization\n","\n","plt.plot(logreg.coef_.T, 'o', label=\"C=1\")\n","plt.plot(logreg100.coef_.T, '^', label=\"C=100\")\n","plt.plot(logreg001.coef_.T, 'v', label=\"C=0.001\")\n","plt.xticks(range(cancer.data.shape[1]), cancer.feature_names, rotation=90)\n","plt.hlines(0, 0, cancer.data.shape[1])\n","plt.ylim(-5, 5)\n","plt.xlabel(\"Feature\")\n","plt.ylabel(\"Coefficient magnitude\")\n","plt.legend()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"XOSkaR_FuOzb"},"source":["# logistic regressing using L1-regularization\n","\n","for C, marker in zip([0.001, 1, 100], ['o', '^', 'v']):\n","  lr_l1 = LogisticRegression(C=C, penalty=\"l1\").fit(X_train, y_train)\n","  print(\"Training accuracy of l1 logreg with C={:.3f}: {:.2f}\".format(C, lr_l1.score(X_train, y_train)))\n","  print(\"Test accuracy of l1 logreg with C={:.3f}: {:.2f}\".format(C, lr_l1.score(X_test, y_test)))\n","  plt.plot(lr_l1.coef_.T, marker, label=\"C={:.3f}\".format(C))\n","  \n","plt.xticks(range(cancer.data.shape[1]), cancer.feature_names, rotation=90)\n","plt.hlines(0, 0, cancer.data.shape[1])\n","plt.xlabel(\"Feature\")\n","plt.ylabel(\"Coefficient magnitude\")\n","\n","plt.ylim(-5, 5)\n","plt.legend(loc=3)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"usuW4OMg8YgL"},"source":["mglearn.plots.plot_linear_svc_regularization()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Y9jRoK4RCvEo"},"source":["# Exercises: Apply LogisticRegression on three blob dataset"]},{"cell_type":"code","metadata":{"id":"FvXtQ2hrtz2N"},"source":["# creates dataset\n","\n","from sklearn.datasets import make_blobs\n","X, y = make_blobs(random_state=42, cluster_std = 3)     # cluster_std: standard deviation of each clusters\n","mglearn.discrete_scatter(X[:, 0], X[:, 1], y)\n","plt.xlabel(\"Feature 0\")\n","plt.ylabel(\"Feature 1\")\n","plt.legend([\"Class 0\", \"Class 1\", \"Class 2\"])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OgSgsvnwC0EI"},"source":["# TO DO: Split data into training and test sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Q85pDQVfC9m2"},"source":["# TO DO: Import LogisticRegression\n","\n","\n","# TO DO: create a LogisticRegression instance\n","\n","\n","# TO DO: train on the training set\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"84e5HJsmDA6V"},"source":["# TO DO: check coefficients and intercept\n","print(\"lr_blobs.coef_: \", lr_blobs.coef_)               # W\n","print(\"lr_blobs.intercept_:\", lr_blobs.intercept_)      # b"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0BcbucrSDT8p"},"source":["# TO DO: print accuracy on training and test sets\n","\n","\n"],"execution_count":null,"outputs":[]}]}